bool dfs(vector<vector<char>>&board,string word,vector<vector<bool>>&vis,int row,int col,int idx)
{
    int m=board.size();
   int n=board[0].size();
   if(idx==word.length())return true;
    if(row<0||col<0||row>m-1||col>n-1||vis[row][col]||board[row][col]!=word[idx])
    return false;
   
   
   
   
       vis[row][col]=true;
       
        if(dfs(board,word,vis,row+1,col+1,idx+1)||
       dfs(board,word,vis,row+1,col-1,idx+1)||
       dfs(board,word,vis,row-1,col-1,idx+1)||
       dfs(board,word,vis,row-1,col+1,idx+1)||
       dfs(board,word,vis,row+1,col,idx+1)||
       dfs(board,word,vis,row-1,col,idx+1)||
       dfs(board,word,vis,row,col+1,idx+1)||
       dfs(board,word,vis,row,col-1,idx+1))
       return true;
       vis[row][col]=false;
       
   
   return false;
}
bool ispresent(vector<vector<char>>&board,string word)
{
   int n=board.size();
   int m=board[0].size();
   vector<vector<bool>> vis(n,vector<bool>(m,false));
   int idx=0;
   for(int i=0;i<n;i++)
   {
       for(int j=0;j<m;j++)
       {
           if(board[i][j]==word[idx])
           {
               if(dfs(board,word,vis, i,j,idx)==true)
               return true;
           }
       }
   }
   return false;
}
vector<string> wordBoggle(vector<vector<char> >& board, vector<string>& dictionary) {
   vector<string> res;
   
   
   for(int i=0;i<dictionary.size();i++)
   {
       string word=dictionary[i];
       if(ispresent(board,word)==true)
       res.push_back(word);
   }
   return res;
}
};


https://practice.geeksforgeeks.org/problems/word-boggle4143/1/?page=1&category[]=Recursion&sortBy=submissions#
